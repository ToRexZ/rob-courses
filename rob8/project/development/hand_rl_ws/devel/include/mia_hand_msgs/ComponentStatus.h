// Generated by gencpp from file mia_hand_msgs/ComponentStatus.msg
// DO NOT EDIT!


#ifndef MIA_HAND_MSGS_MESSAGE_COMPONENTSTATUS_H
#define MIA_HAND_MSGS_MESSAGE_COMPONENTSTATUS_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <std_msgs/Header.h>

namespace mia_hand_msgs
{
template <class ContainerAllocator>
struct ComponentStatus_
{
  typedef ComponentStatus_<ContainerAllocator> Type;

  ComponentStatus_()
    : header()
    , status(false)
    , msg()  {
    }
  ComponentStatus_(const ContainerAllocator& _alloc)
    : header(_alloc)
    , status(false)
    , msg(_alloc)  {
  (void)_alloc;
    }



   typedef  ::std_msgs::Header_<ContainerAllocator>  _header_type;
  _header_type header;

   typedef uint8_t _status_type;
  _status_type status;

   typedef std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>> _msg_type;
  _msg_type msg;





  typedef boost::shared_ptr< ::mia_hand_msgs::ComponentStatus_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::mia_hand_msgs::ComponentStatus_<ContainerAllocator> const> ConstPtr;

}; // struct ComponentStatus_

typedef ::mia_hand_msgs::ComponentStatus_<std::allocator<void> > ComponentStatus;

typedef boost::shared_ptr< ::mia_hand_msgs::ComponentStatus > ComponentStatusPtr;
typedef boost::shared_ptr< ::mia_hand_msgs::ComponentStatus const> ComponentStatusConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::mia_hand_msgs::ComponentStatus_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::mia_hand_msgs::ComponentStatus_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::mia_hand_msgs::ComponentStatus_<ContainerAllocator1> & lhs, const ::mia_hand_msgs::ComponentStatus_<ContainerAllocator2> & rhs)
{
  return lhs.header == rhs.header &&
    lhs.status == rhs.status &&
    lhs.msg == rhs.msg;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::mia_hand_msgs::ComponentStatus_<ContainerAllocator1> & lhs, const ::mia_hand_msgs::ComponentStatus_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace mia_hand_msgs

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::mia_hand_msgs::ComponentStatus_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::mia_hand_msgs::ComponentStatus_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::mia_hand_msgs::ComponentStatus_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::mia_hand_msgs::ComponentStatus_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::mia_hand_msgs::ComponentStatus_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::mia_hand_msgs::ComponentStatus_<ContainerAllocator> const>
  : TrueType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::mia_hand_msgs::ComponentStatus_<ContainerAllocator> >
{
  static const char* value()
  {
    return "365c676b4aefb93cfc7b974237335cea";
  }

  static const char* value(const ::mia_hand_msgs::ComponentStatus_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x365c676b4aefb93cULL;
  static const uint64_t static_value2 = 0xfc7b974237335ceaULL;
};

template<class ContainerAllocator>
struct DataType< ::mia_hand_msgs::ComponentStatus_<ContainerAllocator> >
{
  static const char* value()
  {
    return "mia_hand_msgs/ComponentStatus";
  }

  static const char* value(const ::mia_hand_msgs::ComponentStatus_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::mia_hand_msgs::ComponentStatus_<ContainerAllocator> >
{
  static const char* value()
  {
    return "std_msgs/Header header\n"
"bool status             # True means component is ok\n"
"string msg              # Error message (when state is set to False)\n"
"\n"
"================================================================================\n"
"MSG: std_msgs/Header\n"
"# Standard metadata for higher-level stamped data types.\n"
"# This is generally used to communicate timestamped data \n"
"# in a particular coordinate frame.\n"
"# \n"
"# sequence ID: consecutively increasing ID \n"
"uint32 seq\n"
"#Two-integer timestamp that is expressed as:\n"
"# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')\n"
"# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')\n"
"# time-handling sugar is provided by the client library\n"
"time stamp\n"
"#Frame this data is associated with\n"
"string frame_id\n"
;
  }

  static const char* value(const ::mia_hand_msgs::ComponentStatus_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::mia_hand_msgs::ComponentStatus_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.header);
      stream.next(m.status);
      stream.next(m.msg);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct ComponentStatus_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::mia_hand_msgs::ComponentStatus_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::mia_hand_msgs::ComponentStatus_<ContainerAllocator>& v)
  {
    s << indent << "header: ";
    s << std::endl;
    Printer< ::std_msgs::Header_<ContainerAllocator> >::stream(s, indent + "  ", v.header);
    s << indent << "status: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.status);
    s << indent << "msg: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>>>::stream(s, indent + "  ", v.msg);
  }
};

} // namespace message_operations
} // namespace ros

#endif // MIA_HAND_MSGS_MESSAGE_COMPONENTSTATUS_H
