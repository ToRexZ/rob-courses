// Generated by gencpp from file mia_hand_msgs/FingersStrainGauges.msg
// DO NOT EDIT!


#ifndef MIA_HAND_MSGS_MESSAGE_FINGERSSTRAINGAUGES_H
#define MIA_HAND_MSGS_MESSAGE_FINGERSSTRAINGAUGES_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace mia_hand_msgs
{
template <class ContainerAllocator>
struct FingersStrainGauges_
{
  typedef FingersStrainGauges_<ContainerAllocator> Type;

  FingersStrainGauges_()
    : thu()
    , ind()
    , mrl()  {
      thu.assign(0);

      ind.assign(0);

      mrl.assign(0);
  }
  FingersStrainGauges_(const ContainerAllocator& _alloc)
    : thu()
    , ind()
    , mrl()  {
  (void)_alloc;
      thu.assign(0);

      ind.assign(0);

      mrl.assign(0);
  }



   typedef boost::array<int16_t, 2>  _thu_type;
  _thu_type thu;

   typedef boost::array<int16_t, 2>  _ind_type;
  _ind_type ind;

   typedef boost::array<int16_t, 2>  _mrl_type;
  _mrl_type mrl;





  typedef boost::shared_ptr< ::mia_hand_msgs::FingersStrainGauges_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::mia_hand_msgs::FingersStrainGauges_<ContainerAllocator> const> ConstPtr;

}; // struct FingersStrainGauges_

typedef ::mia_hand_msgs::FingersStrainGauges_<std::allocator<void> > FingersStrainGauges;

typedef boost::shared_ptr< ::mia_hand_msgs::FingersStrainGauges > FingersStrainGaugesPtr;
typedef boost::shared_ptr< ::mia_hand_msgs::FingersStrainGauges const> FingersStrainGaugesConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::mia_hand_msgs::FingersStrainGauges_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::mia_hand_msgs::FingersStrainGauges_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::mia_hand_msgs::FingersStrainGauges_<ContainerAllocator1> & lhs, const ::mia_hand_msgs::FingersStrainGauges_<ContainerAllocator2> & rhs)
{
  return lhs.thu == rhs.thu &&
    lhs.ind == rhs.ind &&
    lhs.mrl == rhs.mrl;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::mia_hand_msgs::FingersStrainGauges_<ContainerAllocator1> & lhs, const ::mia_hand_msgs::FingersStrainGauges_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace mia_hand_msgs

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::mia_hand_msgs::FingersStrainGauges_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::mia_hand_msgs::FingersStrainGauges_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::mia_hand_msgs::FingersStrainGauges_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::mia_hand_msgs::FingersStrainGauges_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::mia_hand_msgs::FingersStrainGauges_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::mia_hand_msgs::FingersStrainGauges_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::mia_hand_msgs::FingersStrainGauges_<ContainerAllocator> >
{
  static const char* value()
  {
    return "8e0dffdebc67e94f504a570700ccd19d";
  }

  static const char* value(const ::mia_hand_msgs::FingersStrainGauges_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x8e0dffdebc67e94fULL;
  static const uint64_t static_value2 = 0x504a570700ccd19dULL;
};

template<class ContainerAllocator>
struct DataType< ::mia_hand_msgs::FingersStrainGauges_<ContainerAllocator> >
{
  static const char* value()
  {
    return "mia_hand_msgs/FingersStrainGauges";
  }

  static const char* value(const ::mia_hand_msgs::FingersStrainGauges_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::mia_hand_msgs::FingersStrainGauges_<ContainerAllocator> >
{
  static const char* value()
  {
    return "int16[2] thu\n"
"int16[2] ind\n"
"int16[2] mrl\n"
;
  }

  static const char* value(const ::mia_hand_msgs::FingersStrainGauges_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::mia_hand_msgs::FingersStrainGauges_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.thu);
      stream.next(m.ind);
      stream.next(m.mrl);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct FingersStrainGauges_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::mia_hand_msgs::FingersStrainGauges_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::mia_hand_msgs::FingersStrainGauges_<ContainerAllocator>& v)
  {
    s << indent << "thu[]" << std::endl;
    for (size_t i = 0; i < v.thu.size(); ++i)
    {
      s << indent << "  thu[" << i << "]: ";
      Printer<int16_t>::stream(s, indent + "  ", v.thu[i]);
    }
    s << indent << "ind[]" << std::endl;
    for (size_t i = 0; i < v.ind.size(); ++i)
    {
      s << indent << "  ind[" << i << "]: ";
      Printer<int16_t>::stream(s, indent + "  ", v.ind[i]);
    }
    s << indent << "mrl[]" << std::endl;
    for (size_t i = 0; i < v.mrl.size(); ++i)
    {
      s << indent << "  mrl[" << i << "]: ";
      Printer<int16_t>::stream(s, indent + "  ", v.mrl[i]);
    }
  }
};

} // namespace message_operations
} // namespace ros

#endif // MIA_HAND_MSGS_MESSAGE_FINGERSSTRAINGAUGES_H
