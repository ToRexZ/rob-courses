{
  "name": "Hand rl control container",
  "dockerFile": "../docker/dockerfile",
  "workspaceFolder": "/development",
  "build": {
    "args": {
      "WORKSPACE": "${containerWorkspaceFolder}/hand_rl_ws"
    }
  },
  "workspaceMount": "source=${localWorkspaceFolder},target=/development,type=bind,consistency=cached",
  // "mounts": [
  //   "type=bind,source=/dev/video0,target=/dev/video0",
  //   "type=bind,source=/dev/video1,target=/dev/video1",
  //   "type=bind,source=/dev/video2,target=/dev/video2",
  //   "type=bind,source=/dev/video3,target=/dev/video3",
  //   "type=bind,source=/dev/video4,target=/dev/video4",
  //   "type=bind,source=/dev/video5,target=/dev/video5"
  // ],
  "remoteUser": "ros",
  "runArgs": [
    "--network=host",
    "--cap-add=SYS_PTRACE",
    "--security-opt=seccomp:unconfined",
    "--security-opt=apparmor:unconfined",
    "--volume=/tmp/.X11-unix:/tmp/.X11-unix",
    "--volume=/mnt/wslg:/mnt/wslg",
    "--ipc=host",
    "--runtime=nvidia",
    "--gpus=all"
    // uncomment to use intel iGPU
    // "--device=/dev/dri"
    // "--device=/dev/video0:/dev/video0",
    // "--device=/dev/video1:/dev/video1",
    // "--device=/dev/video2:/dev/video2",
    // "--device=/dev/video3:/dev/video3",
    // "--device=/dev/video4:/dev/video4",
    // "--device=/dev/video5:/dev/video5"
  ],
  "containerEnv": {
    "DISPLAY": "${localEnv:DISPLAY}", // Needed for GUI try ":0" for windows
    "WAYLAND_DISPLAY": "${localEnv:WAYLAND_DISPLAY}",
    "XDG_RUNTIME_DIR": "${localEnv:XDG_RUNTIME_DIR}",
    "PULSE_SERVER": "${localEnv:PULSE_SERVER}",
    "LIBGL_ALWAYS_SOFTWARE": "1" // Needed for software rendering of opengl
    // Set this environment variable to true to enable the container to be used as a simulation container, false to use the physical robot
  },
  "customizations": {
    "vscode": {
      "extensions": [
        "ms-python.python",
        "betwo.b2-catkin-tools",
        "DotJoshJohnson.xml",
        "ms-azuretools.vscode-docker",
        "ms-iot.vscode-ros",
        "ms-vscode.cpptools",
        "redhat.vscode-yaml",
        "smilerobotics.urdf",
        "streetsidesoftware.code-spell-checker",
        "twxs.cmake",
        "yzhang.markdown-all-in-one",
        "zachflower.uncrustify",
        "vsliveshare.vsliveshare",
        "github.copilot",
        "ms-vscode.cpptools-extension-pack",
        "tomoki1207.pdf",
        "irongeek.vscode-env",
        "ngtystr.ppm-pgm-viewer-for-vscode",
        "mutantdino.resourcemonitor"
      ]
    }
  },
  "postCreateCommand": "pip install -r requirements.txt"
}